webpackJsonp([0xd138dc921b7b],{416:function(e,t){e.exports={data:{site:{meta:{title:"Trevor Richardson",description:"Thoughts on life & crafting software",url:"https://trevorrichardson.me",author:"richardson-trevor",twitter:"trevtrich"}},post:{id:"/home/runner/work/website/website/src/pages/articles/2021-12-13-foray-into-websockets-pt-2/index.md absPath of file >>> MarkdownRemark",html:'<p>So, <a href="/articles/foray-into-websockets">part 1</a> actually went much better than I would\'ve expected. I had no idea the raw web apis were so friendly at least to get something basic working. Essentially once you have a connection you\'re off to the races. Following that up with a pub/sub topic subscription and firing off new notifications whenever they came was equally straightforward. Now, after I had that success I came away with some questions (which is always the big win of hacking on something new).</p>\n<ol>\n<li>What is this <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">upgrade thing</a> some docs reference as the "Web" in websockets (can\'t seem to find direct reference), but the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications#examples">MDN docs do reference this upgrade</a> path as the way a browser creates them.</li>\n<li>What does it look like to turn this single connection into production worthy?\na. What happenes when the network drops?</li>\n<li>How do you manage lots of persistent connections?\na. Any established best-practice or "websocket servers" that manage all this for you?</li>\n<li>Where in the flow do we establish and link who is who for a new connection attempt to the server?</li>\n</ol>\n<h2>What is this http "upgrade" thing?</h2>\n<p>Direct quote from <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications#examples">the MDN docs</a>:</p>\n<blockquote>\n<p>Establishing a WebSocket relies on the HTTP Upgrade mechanism, so the request for the protocol upgrade is implicit when we address the web server as ws://www.example.com or wss://www.example.com.</p>\n</blockquote>\n<p>I\'ve seen elsewhere this is the "web" in websockets. Primarily the fact that the initial request is regular http but is sent with the <code class="language-text">upgrade</code> protocol which indicates to the server it would like to upgrade to a websocket connection.</p>\n<p>Ew, some interesting info from the mdn <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol Upgrade Mechanism</a>:</p>\n<blockquote>\n<p>This mechanism is optional; it cannot be used to insist on a protocol change. Implementations can choose not to take advantage of an upgrade even if they support the new protocol, and in practice, this mechanism is used mostly to bootstrap a WebSockets connection.</p>\n<p>Note also that HTTP/2 explicitly disallows the use of this mechanism; it is specific to HTTP/1.1.</p>\n</blockquote>\n<p>So I have a little digging to do to verify what happens when the initial connection is made over http/2.</p>\n<p>An example upgrade request from the same MDN upgrade docs:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">GET /index.html HTTP/1.1\nHost: www.example.com\nConnection: upgrade\nUpgrade: example/1, foo/2</code></pre>\n      </div>\n<p>and a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism#upgrading_to_a_websocket_connection">specific section for the upgrade to websocket protocal</a>. I will say, the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/101">101 Switching Protocols http response status code</a> is not one I was familiar with. Interview questions, I guess.</p>\n<h2>What does production look like for websockets?</h2>\n<ul>\n<li>heartbeat?</li>\n<li>wss connection</li>\n<li>token expiration if the socket is open for more than token life span</li>\n<li>does logging / apm agent actually monitor websockets? appears some don\'t.</li>\n</ul>\n<p>Recommendations</p>\n<ul>\n<li>Base autoscaling on number of open connections because things like CPU will often be misleading as open connections will often remain idle.</li>\n</ul>\n<h2>Other links I used in building this.. that probably mean I had things to learn or lock into memory and needed to come back to.</h2>\n<h3>Getting it going...</h3>\n<ul>\n<li><a href="https://blog.mrg.sh/build-a-websocket-server-using-express-and-ws-package">https://blog.mrg.sh/build-a-websocket-server-using-express-and-ws-package</a></li>\n<li><a href="https://github.com/trevtrich/websocket-live-eventing">https://github.com/trevtrich/websocket-live-eventing</a></li>\n<li><a href="https://www.npmjs.com/package/ws#sending-and-receiving-text-data">https://www.npmjs.com/package/ws#sending-and-receiving-text-data</a></li>\n<li><a href="https://github.com/websockets/ws/blob/c82b08737fbe142dd910fc7e429399e23b95c6d6/examples/express-session-parse/index.js">https://github.com/websockets/ws/blob/c82b08737fbe142dd910fc7e429399e23b95c6d6/examples/express-session-parse/index.js</a></li>\n<li><a href="https://codehandbook.org/how-to-render-html-page-in-express/">https://codehandbook.org/how-to-render-html-page-in-express/</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications#receiving_messages_from_the_server">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets<em>API/Writing</em>WebSocket<em>client</em>applications#receiving<em>messages</em>from<em>the</em>server</a></li>\n<li><a href="https://attacomsian.com/blog/javascript-update-element-text">https://attacomsian.com/blog/javascript-update-element-text</a></li>\n<li><a href="https://cloud.google.com/pubsub/docs/reference/libraries#client-libraries-install-nodejs">https://cloud.google.com/pubsub/docs/reference/libraries#client-libraries-install-nodejs</a></li>\n<li><a href="https://console.cloud.google.com/cloudpubsub/topic/detail/test-messages?authuser=1&#x26;project=websocket-server-334803&#x26;tab=messages">https://console.cloud.google.com/cloudpubsub/topic/detail/test-messages?authuser=1&#x26;project=websocket-server-334803&#x26;tab=messages</a></li>\n<li><a href="https://stackoverflow.com/questions/40032678/where-are-google-application-default-credentials-stored">https://stackoverflow.com/questions/40032678/where-are-google-application-default-credentials-stored</a></li>\n</ul>\n<h3>Production</h3>\n<ul>\n<li><a href="https://medium.com/voodoo-engineering/websockets-on-production-with-node-js-bdc82d07bb9f">https://medium.com/voodoo-engineering/websockets-on-production-with-node-js-bdc82d07bb9f</a></li>\n</ul>',frontmatter:{layout:"post",title:"Foray into websockets - pt 2",path:"/articles/foray-into-websockets-pt-2",categories:["architecture"],date:"2021/12/13"}}},pathContext:{}}}});
//# sourceMappingURL=path---articles-foray-into-websockets-pt-2-a522d7b37de98a0c5c80.js.map