webpackJsonp([0x81b8806e4260],{433:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Trevor Richardson",description:"Thoughts on life & crafting software",url:"https://trevorrichardson.me",author:"richardson-trevor",twitter:"trevtrich"}},remark:{posts:[{post:{html:"<p>This is the content of the first blog (test) on the website.</p>",frontmatter:{layout:"post",title:"Hello World!",path:"/articles/hello-world",categories:["TESTS"],description:"This is a test first blog article.",date:"2017/10/11"}}},{post:{html:'<p><em>Title: Good to Great</em>\n<em>Author: Jim Collins</em></p>\n<p>The book starts out giving some pretty strict credentials for what is thought of as a "Good to Great" company. A few of them are:</p>\n<ul>\n<li>First Who, then What</li>\n<li>Level 5 Leadership</li>\n<li>The Flywheel</li>\n<li>Hedgehog Concept</li>\n</ul>\n<h2>First Who, then What</h2>\n<p>This is all about getting the right people on board before you worry about finding the "right" product to make. He argues and backs the idea that most companies who did well did not worry so much about choosing the correct market right away, rather they focussed on getting people on board for the shared mission. Doing so takes away or mitigates concerns about keeping people motivated. He argues that if you get the right people on board this is a non-issue. You shouldn\'t have to motivate, rather if you have people that share your vision, passion, and ethic, that takes care of itself.</p>\n<h2>Level 5 Leadership</h2>\n<p>The CEO is a humble, hard-working, dedicated person that has come from inside the company and slowly worked their way up. They are the type that, asked how they drove the company to its success, will almost assuredly reply "it was the people around me". Though humble, they are hard-drivers. They expect hard work, but they also live a good life. He doesn\'t say these are people that forgo their families in an effort to get rich by working all the time. He notes many who have at-home hobbies that they consistently attend to. The core comes back to having people around that you trust so that you don\'t feel you have to do the work. You know the work is getting done by getting these people around you.</p>\n<h2>The Flywheel</h2>\n<p>Long story short, "get rich quick" doesn\'t work. Slowly apply and drive progress bit by bit, but toward a goal. That is key. Knowing your hedgehog concept (described in the next section) is where this is at. Steady growth and development always.</p>\n<h2>Hedgehog Concept</h2>\n<p>The analogy here comes from a story that in which a hedgehog is constantly annoyed by a predator. Each and every day the predator (much more powerful in a human\'s eyes like a fox) comes back and tries to attack it, and each and every day the hedgehog uses its go-to method of defense (flaring its quills) to make the fox go away. The high level concept is that we need one driving motivation that is at the lifeblood of the company. Decisions, meetings, they all come back to this as the core place to point. The concept needs to be an overlap of three chracteristics:</p>\n<ul>\n<li>You are passionate about it</li>\n<li>You can be the best in the world at it</li>\n<li>A measurement that drives the companies "engine" (profit per customer, etc.)</li>\n</ul>\n<h1>Summary</h1>\n<p>The major take away for me in this book was that the little things make all the difference. Shocker, right? But honestly, Collins shows that it was never the rockstar CEO but rather the person that climbed the ladder from inside. It was never the "get rich quick" schemes. It was never "motivating the employees" through quick motivational speakers or schemes. It was never paying more to "bring in the talent". It was all the things we think of as boring stuff. Character and integrity come to mind. This is what it takes.</p>\n<p>Craft on.</p>',frontmatter:{layout:"post",title:"Book Review: Good to Great",path:"/articles/good-to-great",categories:["BUSINESS","REVIEW"],description:"My thoughts on the Jim Collins book entitled Good to Great.",date:"2017/10/17"}}},{post:{html:"",frontmatter:{layout:"post",title:"Choosing a task manager",path:"/articles/task-managers",categories:["PRODUCTIVITY","DRAFT"],description:"I discuss some of the task managers that I've tried, what I've liked, and what I've disliked about each.",date:"2017/10/16"}}},{post:{html:'<h1>Visual Studio</h1>\n<p>The first IDE I got experience with was Visual Studio Professional Edition as a student at the university. We were doing C++ development, so this made for a nice editor. At the time, I didn\'t see the value of the refactoring tools that I saw in the IDE so I never used them. To be honest, I\'m guessing they\'ve got some nice stuff in there, but I never did dig in to get familiar with them. I primarily used it as a text editor that had some very imporessive autocompletion. To my experience, it was some of the best I have seen to date. Props to Microsoft in that regard.</p>\n<h1>IntelliJ / Webstorm</h1>\n<p>The second IDE I used was Jetbrains IntelliJ. I used it primarily for Scala, but also for Java. At this same time, I had a ton of people around me that were power users in regard to keyboard shortcuts and refactoring. This REALLY opened up my eyes to what could be done with a typed language and a good IDE. I haven\'t found anything outside Jetbrains products that have the refactoring support that all of their tools do. The shortcuts to pull out a method and have all it\'s args figured out dynamically was and is wonderful. This is the one thing I have found that may someday push me back to Jetbrains products away from Vim. I am still a huge fan of IntelliJ and Webstorm, but a little over a month ago decided to switch over to using Vim, as I\'ll explain below.</p>\n<h1>Vim</h1>\n<p>The primary motivation for moving to Vim was the thought of open source, lightweight tools. Tools that would force me to learn the native tools that the OS gives me (in my case I\'m a Mac OS user). I had always wanted to get familiar and felt like I show know the likes of grep, awk, etc. because they are generally available anywhere. There\'s something in this that feels empowering. The inner \'hacker\' has to love the idea of being able to have your same tools no matter what devide you sit on. Sure, you can purchase IntelliJ / Visual Studio on most devices, but the thought of using what for the most part comes out of the box on some major OSs is a huge win in my mind. So, that left me to change over to Vim.</p>\n<p>I wanted to start out with bare bones vim and see what additions I would need to make my list of \'must-haves\' that I used all the time in other IDEs:</p>\n<ul>\n<li>Extract variables</li>\n<li>Rename variables</li>\n<li>Find all references to a given attribute / method</li>\n<li>Open files through search</li>\n</ul>\n<p>So, where I\'m at.</p>\n<h2>Extract variables</h2>\n<p>If you have a situation like the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">method(&#39;arg1&#39;);</code></pre>\n      </div>\n<p>there are often situations when you want to pull out <code class="language-text">arg1</code> into a variable like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">const arg1 = &#39;arg1&#39;;</code></pre>\n      </div>\n<p>There is a native Vim way to do this. Select your quoted <code class="language-text">arg1</code> using whatever visual selection shortcuts you want, then <code class="language-text">&lt;c&gt;</code> then type your variable name <code class="language-text">arg1</code>. At this point, you think you\'re stuck and you\'ll have to manually extract the var, but you don\'t. Hop up to the line above and type <code class="language-text">const</code> then <code class="language-text">&lt;Ctrl-a&gt;</code> will paste in the last thing you typed, which was the variable name. next, finish this out by typing <code class="language-text">=</code> then <code class="language-text">&lt;p&gt;</code> to paste what you had originally captured with <code class="language-text">&lt;c&gt;</code>. Seems like a lot, I know, but this gets to be really straightforward once you get the hang of the different pieces and use them in other contexts as well.</p>\n<p>What I really liked about this was that it didn\'t require  plugin at all. It\'s pure Vim. Win.</p>\n<h2>Rename variable</h2>\n<p>This was one of the first sets of plugins I used. For this I use a combination of <a href="https://github.com/ternjs/tern_for_vim">tern for vim</a> and <a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a>. Once installed, these will allow you to do things like <code class="language-text">:YcmCompleter RefactorRename NEW_NAME</code> to rename the variable under the cursor. This combination of plugins also allows find all references, find definition if your cursor is over a function or variable. So, even though this was a little bit heavy-weight and thus not ideal, I felt the tradeoffs were worth it. I\'m still not fully happy with the variable reference finding and definition resolving in ES6 JavaScript, but the support is supposedly there. Should I figure that out, I\'ll try to get a post up saying how to do that and will link from here.</p>\n<h2>Find all references</h2>\n<p>See Refactor Rename explanation. This is a part of the combination of tern.js and YouCompleteMe.</p>\n<h2>Open files through search</h2>\n<p>So for this I originally started out by watching <a href="https://www.youtube.com/watch?v=XA2WjJbmmoM">a video on using vim without plugins</a>. You essentially set your path for vim to <code class="language-text">**/*</code> so that it searches everything from your current directory on down. While this did work, and I stuck with it for 3-4 weeks, I was never able to make it as fast as I wanted. I tried lots of path limiting with wildignore, etc. but none seemed to speed it up. For this, I eneded up with the <a href="https://github.com/ctrlpvim/ctrlp.vim">Ctrl-P</a> plugin. This worked wonderfully out of the box, and I\'ve been really happy with it thus far.</p>\n<h1>Summary</h1>\n<p>Although I am not fully happy with where I\'m at with Vim, I can honestly say I have liked the move and have no currently plans to move back to Jetbrains products. The mindset behind the use of Vim is something I really appreciate, and it also drives some good habits in learning small tools to become powerful, wich I really like. I will say again, though, the one thing that may take me back to other products will be the refactoring support. Primarily the extraction of methods. However, thus far the pain caused by the lack of that functionality has not been enough to drive me to change. Should I find a good solution for this in Vim I will be sure to link here.</p>\n<p>Craft on.</p>',frontmatter:{layout:"post",title:"To Vim or Not to Vim",path:"/articles/using-vim",categories:["DEVELOPMENT"],description:"In this article I talk about my transition from Jetbrains products to Vim for software development.",date:"2017/10/24"}}},{post:{html:"<p>To be honest, I ended up here through being asked to present at the local Des Moines JavaScript user group. I wanted to be able to point people to a place where they can find me. The easiest way to do that for a bunch of developers is to point to a webpage. So, here I am. I think it's a good thing, and I'm glad this kicked me over the edge to get started. We'll see where it goes.</p>\n<p>I tend to think a lot. I plan to make this where I put those thoughts. If I think I have something actually useful, I may find a better way to communicate that out, but for now this will primarily be a place for me to brain dump and take notes on what I'm up to.</p>\n<p>The topics I'll likely cover will be in the realm of software engineering (emphasis on craftsmanship), being a dad, and being a Christian in today's society. If you're interested in any or all of these, excellent.</p>\n<p>Craft on.</p>",frontmatter:{layout:"post",title:"Why this blog",path:"/articles/why-start",categories:["BRAND"],description:"This article touches on why I am starting.",date:"2017/10/16"}}},{post:{html:"<p>Over the last couple of days I've had the thought come to mind that I do a lot of what I'll call striving. My wife and I often talk about the things we plan to do, the things we're looking forward to, the things we would do, etc. My take away is often \"you should make more\" or \"you should find a way to provide more than you do\". All of this has a condemning nature to it in my world. In a way, I start beating myself up about why we can't do those things yet. Don't get me wrong, there's some great benefit to being driven and motivated to grow and build. God put it in us from the start. He literally set us out into the world as early as Adam and said \"take care of this\". The unhealthy part comes in when it takes away from how content I am in the present.</p>\n<p>At first thougt a lot of it in my head comes down to wanting what other people have. It's hard to not want some of the cool stuff you see. Again, there's really nothing inherently wrong with this, it's all about the extent to which it motivates or condemns. In reality, I'm certain what we have right now on our acreage is more than the overwhelming majority of the populace even a hundred years go. Potentially even today. But hey, air conditioning and a heated house and multiple bedrooms are must-haves, right? We have to have those. Expectations and norms change. As soon as we have something, we're used to it. Hm. This is life, though.</p>\n<p>It makes me think of Job. The book of Job is pretty crazy. He's literally had everything stripped from him, yet he praises God for just giving him life. I have no idea where he was at in life at that point and what things were like in practicality for him. Was he just very disciplined? Was he mad? Was he truly still joyful? It seems a mix of all of it can be found. What do we take of it? God was proud of him the whole time. He knew Job would stick through it. This is a characteristic that's hard to find. Not only was he devoted in the good times, but he stayed devoted in the bad. He was ever confident where he was at in God's eyes. Very cool.</p>\n<p>Back to ground zero. Are we going to be any happier if the things we're striving for come? Not likely. There are certain conveniences that would be nice, but for the most part we'll be used to the changes in a short time and be back to striving for the next thing. It really comes down to the things that will stick with us. Relationships, family, and craft are some at the top of my intellectual list if you would ask me. Do I carry this out in my day-to-day? Nope. I don't have many friends. I'm an introvert by nature, so it's much easier for me to hole up and enjoy a night in. I put a ton of mental energy into how to make the next move in business. Much more time than it deserves is put into this.</p>\n<p>So what to do. The biggest thing for me is remembering where I'm at. Remembering what I'm shooting for, and being willing to dig in a get after exactly those things. Much easier said than done, but very much worth persuing.</p>\n<p>Craft on.</p>",frontmatter:{layout:"post",title:"All the wealth in the world",path:"/articles/all-the-wealth",categories:["LIFE","STRIVING"],description:"Recent thoughts I've had on wealth and striving.",date:"2017/10/18"}}},{post:{html:"<p>I've come to realize in the years I've been doing software development that there's a strong internal alarm that goes off quite often when I'm working on a tough problem or I'm about to start something new. What I've come to realize in stepping back is that this internal alarm is often triggered by discomfort. I don't feel prepared for it. I might even be afraid of it. In fact, I think I <em>am</em> afraid of it.</p>\n<p>Example: I've read a fair bit about the UNIX motto. Build small things. Allow said small things to mingle in well-established patterns. I love this idea. I also know there are a ton of tools out there that the \"good\" developers use and are effective with. Tools like <code class=\"language-text\">sed</code>, <code class=\"language-text\">awk</code>, <code class=\"language-text\">grep</code>. Though I always told myself I'd someday practice them, I never really got around to it. Situations commonly come up that I know there's a good UNIX tool for, but I instead stick to what I am comfortable with. A concrete example of this is finding a file. Rather than using a cli tool, I'd instead open up (yes, I said open up) a JetBrains product and perform a file search for the file I wanted to make a quick edit on. Clearly this is slower. Why didn't I just learn some basic unix tools to do this when I knew they existed? Well, again I think it came to the fact that I was afraid of or anxious about learning it.</p>\n<p>This year has been the year of forcing myself to learn these things that make me nervous. Whether UNIX sys utilities or the Vim and Tmux combo as my primary development editor, I have forced myself out of my comfort zone in order to open up my toolset. To realize what's really out there, and then to take a step back and decide for myself whether the tool I was previously using is better, or if I was just using it because it was comfortable. It's been a good experience. There's not always time to learn new tools, but more than that my previous tendency was not due to time but rather being nervous or afraid to get out of my comfort zone.</p>\n<p>Though I won't get into it now, this concept is much broader than learning NEW things. This comes up every single day. An example is working through problems in code. You know there should be a good way to <code class=\"language-text\">reduce</code> or <code class=\"language-text\">fold</code> over some data with good \"functional\" techniques, but you go back to modifying an array because it's comfortable and not quite as challenging. While there's certainly something to say for just getting stuff done, that's not a way to grow as fast as you could be.</p>\n<p>I fully admit that I don't always hold to this, but every time I feel that anxiety creeping up on me, I now at least know to take a step back and make a conscious decision on whether I am willing to take a tradeoff of time rather than just being afraid of learning whatever new tool .</p>",frontmatter:{layout:"post",title:"If you're afraid of it, build something with it",path:"/articles/if-you-re-afraid-of-it-build-something-with-it",categories:["DEVELOPMENT"],description:"Those times when you are uncomfortable with a piece of technology can sometimes be a good way to learn that maybe you should dive in and build something with it.",date:"2017/12/18"}}},{post:{html:'<p>Coming into this I was expecting a relatively technical book on testing; specifically where Google finds it\'s unique niche in that realm. I was surprised to find out (very quickly) that this book is focussed much more on testing as a culture and as a mindset. This opens it up to be a book I\'d recommend even to non-technical folks if they are in a software company.</p>\n<p>The authors start with the overall path that Google had taken to get to the point they are with testing starting with no testers and quickly realizing that wasn\'t sustainable when they had become a verb rather than a proper noun. They then quickly jump into the roles that have developed into their idea of the "testers". A key point throughout the book is the reliance on keeping the "test team" in an organization small to focus resources on where they are really needed.</p>\n<p>They spend a good majority of the book discussing the specific roles they have created in their organization for testers and what those specific roles do throughout the day.</p>\n<h1>Software Engineer in Test</h1>\n<p>These are the testers that are still writing code the majority of their time. They spend their time building tools, patterns, and systems that can be used to make the product engineers more productive and more willing to test their own software. Essentially, their job is making it easy for the software engineers to do the right thing and test their code. This can come in the form of creating test stubs that numerous teams use across the organization, build systems that automate away some of the infrastructure for running tests, etc.</p>\n<h1>The Test Engineer</h1>\n<p>The TE is an engineer that is as much in-tune with testing as in-tune with the product teams and the customers. They are the "pulling it all together" engineers. They make sure users flows are not broken, that risk areas are being tested, and that users are being looked after (usability, accessibility, etc.). They are a step further away from the software engineers than the Software Engineers in Test, but are very much in-tune with the products and the future vision.</p>\n<p>They discuss a point that I found interesting here. The mention of agile methodologies doing away with much of what we used to think of as the "testing" phase. Since we now have the deployment capabilities to send a product to only small subsets of customers for testing (whether beta testers or real-world). Nothing specific to apply because of this, but worth considering. I hadn\'t thought about it much thus far. As we get further in this direction, it will be interesting to see how this mindset affects any role that we consider a test role.</p>\n<h1>Closing Thoughts</h1>\n<p>In the final chapters of the book, the authors discuss the future of testing. A key point that very much summarizes the book and it\'s core idea is that they believe the "software engineer in test" will become a things of the past. They believe that the all testing will simply be a job requirement of the software engineer. That it will be so embedded in the culture that there won\'t have to be a separate title for it. This has been the direction they are seemingly headed and truly believe.</p>\n<p>Overall, this was a good read. I\'m not sure I come away with it with any specific thoughts or changes that should or could be made in my workplace, but I do think the thoughts and ideas expressed here are worth considering and instilling in a company culture.</p>\n<p>It will be interesting to see in the coming years and decade what the role of a tester does become. Will we have them? I think so. As I think the authors would agree, there will always be a need for exploratory testing. Someone to side on behalf of users no matter how early in the process users choose to be involved.</p>\n<h1>Review</h1>\n<p>6/10.</p>',frontmatter:{layout:"post",title:"How Google Tests Software",path:"/articles/how-google-tests-software",categories:["REVIEW","TESTING"],description:"This is a book review of the book &quot;How Google Tests Software&quot; by James A. Whittaker, Jason Arbon, Jeff Carollo.",date:"2018/01/30"}}},{post:{html:"<p>What REST in Practice was for the practical minded this one was for the theoretical or academic. While it did go into some example code, the usage of the example was not to the same level as that of REST in Practice. This book had a closer focus to the core concepts of REST which happened to be what I was looking for.</p>\n<p>One of the best things the book did was instill the concept of resources and thinking of things as such. They even go to the extent of implementing a transactional system that views the transactions as a resource. The author comes back to the point that if there's something you feel you can't implement with REST or you find yourself leaning toward RPC style calls like GET <code class=\"language-text\">/METHOD/apply</code> you might be missing a resource that would allow you to hold to the RESTful practices.</p>\n<p>They do go into some high-level discussion of implementing security, caching, etc. but given that this isn't the focus of the book, they don't go into much detail. They give you just enough to show you that these things can all be covered, but recommend you on to other publications for learning them in any depth.</p>\n<p>The authors came up with the concept of Resource Oriented Architecture (ROA) that was meant to be a more practical or \"suggested\" starting place for implementing REST rather than a standard like what REST is. Though I was excited at the idea that was being shot for, I didn't find it significantly different than many other publications suggesting the use of REST. I didn't feel I had much more guidance than had I just known about the REST standard and gone and started implementing.</p>",frontmatter:{layout:"post",title:"Restful Web Services",path:"/articles/restful-web-services",categories:["REVIEW","API","REST"],description:"This is a book review of the Restful Web Services book by Leonard Richardson and Sam Ruby",date:"2018/01/12"}}},{post:{html:"<p>I was pointed to this book after a brief RFC from a friend wondering if anyone had recommendations for books on REST that weren't just theory. Most suggested you need to learn by doing, which I agree with for the most part, but I also feel some theory is important to understand the big picture. This book was a perfect mix of both.</p>\n<p>The continuing app that is being built in the book is one of a coffee shop and the API (the baristas / servers / cashiers) it would take to run the place  The book instills the <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson Maturity Model</a> from beginning to end, building up the coffee shop app with the different levels as a way to explain the benefits / tradeoffs of each level.</p>\n<p>The primary takeways I have are:</p>\n<ul>\n<li>A greater instilled mindset that resources should be thought of as such. Web resources can be acted on. By using something like RPC we aren't using the web in the way the web works at scale. It can be done (and in some cases maybe should be done) but this is a different situation than 'designing for the web'.</li>\n<li>Using RESTful concepts can lead to many free benefits from the way the web works. If we use GET in a way that is always safe from side effects, we can leverage web caching from middlewares that we may or may not even control. We have control over many of these potential free benefits by the response as well as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching\">request headers available for caching manipulation</a>. This was a topic I had never gotten into much, but this book does a great job of covering.</li>\n</ul>",frontmatter:{layout:"post",title:"REST in Practice",path:"/articles/rest-in-practice",categories:["REVIEW"],description:"REST in Practice is one of the better tech books I&#x27;ve read. It was a nice mix of implementation and theory, of which I haven&#x27;t seen done this well very often.",date:"2017/12/07"}}},{post:{html:"<p>DRAFT</p>",frontmatter:{layout:"post",title:"Follow the Scent of Your Tests",path:"/articles/follow-the-scent-of-your-tests",categories:["craft","development"],description:"This blog will discuss how the smell of a codebase&#x27;s tests are an excellent indicator of health of the code itself.",date:"2018/04/10"}}},{post:{html:"<p>DRAFT</p>",frontmatter:{layout:"post",title:"Are integration tests only a problem because of design?",path:"/articles/are-integration-tests-only-a-problem-because-of-design",categories:["craftsmanship","software"],description:"In this blog I&#x27;ll discuss my thoughts I&#x27;ve been struggling with on the topic of integration tests and how they shouldn&#x27;t be used to test &quot;unit&quot; level scope.",date:"2018/05/31"}}},{post:{html:"<p>Ray Dalio is the founder of Bridgewater Associates. Bridgewater has done better for its investors than any other private hedge fund to date. While other funds were losing money like mad in the market crash in the first decade of the 2000s, Dalio landed his investors more than a 10％ return in the same time period. Disciplined decision making was and still is the core of Bridgewater, and is how they were able to pull this off.</p>\n<p>Throughout the course of Dalio's career, he has taken note of each major decision he made, the result of the decision, and how to move forward from there. These notes or \"principles\" are where the book got its name. Take a step back and think of this. What type of person does it take to diligently note decisions being made over a lifetime? Picturing that person, you would get a solid perspective on Dalio and how he and Bridgewater operate.</p>\n<p>It's all about trying to make the most logical decision given the most information at the time given past experience. He has optimized his day to day practices to make this the forefront of everything he does. Life, career, and relationships are all engulfed in this concept.</p>\n<p>In business, this comes in the form of using prior decisions and results to generate models for how to make decisions in the future. This makes what is normally a very emotional world of investments a more thoughtful, logical operation. Again, this was why they were able to have a positive return for investors during the real estate  crash of 2008. Their models told them that people were taking out more credit than they could afford. While other companies were taking the \"sure bet\" money machine that was the real estate market, Bridgewater was putting money elsewhere to avoid the looming crisis.</p>\n<h1>Baseball Cards</h1>\n<p>I was surprised to find out that Bridgewater has what they call baseball cards for each employee that have \"stats\" of each person, what they are good at, what they test well in, what their personality type is, and how \"believable\" (explained below) a person is. These cards are used to get employees on the same page for example during a meeting. You sit down with a group you're not entirely familiar with, look at everyone's baseball cards and you know who you're working with from the outset. If a decision is to be made and folks are struggling to settle on a decision, those that are the most believable are left to make the decision.</p>\n<h1>Believability</h1>\n<p>Believability is a core concept Dalio brings up many times throughout the book. Those that are believable are those that have proven success through experience and or backing from the people around them. Believability has nothing to do with seniority or years of experience, rather purely those things that should lead to the person with the best experience and track record being given the right to make the decision.</p>\n<h1>\"Managing\" Yourself</h1>\n<p>Dalio suggests that we all should view ourselves as a machine that we are tasked with managing to complete a goal. That is, you need to take yourself out of your own body and \"use\" your abilities / relationships as if you were your own manager. I thought this was really interesting and wise. Too often we take the day to day as it comes. A lot of times we get caught into the flow of life and forget that we have goals we want to achieve, and that by \"flowing\" we aren't always (read rarely) headed in the best direction to achieve said goals. This is a nice challenge to take on.</p>\n<h1>Staying in Sync</h1>\n<p>You know those times when you have something you'd like to inform a co-worker about, but you think it might hurt their feelings, embarrass them, or even get them in trouble? This is a concept discussed as \"getting in sync\". Bridgewater strives for openness, honesty, and healthy debate / disagreement. They have taken this to such an extent that if it is found out that you are witholding info like this from someone, there may be negative consequences. Said a different way, if you leave a meeting and think that someone said something unproductive or wrong, if you don't inform them of that and someone finds out about it, you may be fired. This is where they get the \"cultish\" feel that people talk about. Whoof, this one makes me uncomfortable. I know this is valuable, but this fights my nature to avoid conflict and making someone feel bad at all cost. It's important to note that they are very open and clear to new employees about this. That if you don't agree or are not on board with this, you aren't fit for the company. It's easier when everyone is expecting it, but they do report that a healthy percentage of new hires still don't make it past 1.5 years because they simply can't get used to this practice. I can certainly see why. It would be an interesting environment, though, and I think we could all use to be a bit more open and honest with people as long as we have the right intentions in helping out our teams.</p>\n<h1>Closing Thoughts</h1>\n<p>I wouldn't want my children spending too much time around him, but Dalio has some great career perspective and has a very proven track record. If you come from a Christian belief system, keep your eyes open as you read through this. Dalio is not yet a God fearing man, and this shows; so don't check your logical mind at the door and blindly listen to what's being said. That said, there's some gold in here. God has a way of giving out talents that blows my mind, and I love that.</p>\n<h1>Review</h1>\n<p>6/10</p>\n<p>Great content, but could've been half the size and gotten all same points across.</p>",
frontmatter:{layout:"post",title:"Principles",path:"/articles/principles",categories:["review","life","business"],description:"This is a book review of the book &quot;Principles&quot; by Ray Dalio, the founder of Bridgewater Associates. The man is extreme in his views on disciplined decision making. Extreme to an extent that his company has been called a cult by some. After reading this book, it&#x27;s easy to see why. There&#x27;s a lot to learn from his &quot;principles&quot;.",date:"2018/04/08"}}},{post:{html:"<p>DRAFT</p>",frontmatter:{layout:"post",title:"Review: The Tangled Web",path:"/articles/review-the-tangled-web",categories:["REVIEW"],description:"This will be a review of the book The Tangled Web",date:"2018/02/27"}}},{post:{html:'<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ git reset --hard COMMIT_HASH_TO_REVERT_TO\n$ git reset --soft @{1}\n$ git commit</code></pre>\n      </div>\n<p>Credit to: <a href="https://stackoverflow.com/questions/1463340/how-to-revert-multiple-git-commits">https://stackoverflow.com/questions/1463340/how-to-revert-multiple-git-commits</a></p>',frontmatter:{layout:"post",title:"TIL: Revert multiple commits",path:"/articles/til-revert-multiple-commits",categories:["TIL"],description:"There are times when you want to revert everything back to a given commit. This is how.",date:"2018/08/31"}}},{post:{html:'<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">echo &quot;&#39;ARG1&#39;\n&#39;ARG2&#39;&quot; | xargs -I {} jq &#39;.{}[SEARCHING_FOR]&#39; FILE.json</code></pre>\n      </div>',frontmatter:{layout:"post",title:"TIL: A little jq with xargs",path:"/articles/til-a-little-jq-with-xargs",categories:["TIL","CLI"],description:"A snippet on how to use xargs to pump searches into jq commandline json processor",date:"2018/08/02"}}},{post:{html:'<p>If you want to, for example, delete multiple files with the <code class="language-text">find</code> command on Mac OS terminal you can use something like: <code class="language-text">find -E . ! -regex &#39;.*/(file1.js|file2.js)&#39; -delete</code>. Without the <code class="language-text">-E</code> you aren\'t able to use the <code class="language-text">|</code> operator amongst other things.</p>',frontmatter:{layout:"post",title:"TIL: Using find with extended regex",path:"/articles/til-using-find-with-extended-regex",categories:["TIL"],description:"Enabling the use of more &#x60;normal&#x60; regex patterns with the &#x60;find&#x60; command.",date:"2018/08/31"}}},{post:{html:'<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">vimdiff &lt;(jq -S . FILE1.json) &lt;(jq -S . FILE2.json)</code></pre>\n      </div>',frontmatter:{layout:"post",title:"Diff json blobs with jq and vimdiff",path:"/articles/diff-json-blobs-with-jq-and-vimdiff",categories:["TIL"],description:"There are times when you need to figure out the semantically different pieces of json files. This helps do so.",date:"2019/01/30"}}},{post:{html:'<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">jq &#39;.[] | select((.arrayAttribute | length) &gt; 1)&#39; FILE.json</code></pre>\n      </div>',frontmatter:{layout:"post",title:"TIL: Use jq to find all elements with an array property of given length.",path:"/articles/til-use-jq-to-find-all-elements-with-an-array-property-of-given-length",categories:["TIL"],description:"This was a useful one for digging through a large object that I needed to find all of those with a given property that was an array and the array had a given length.",date:"2018/10/12"}}},{post:{html:'<p>There are times when I get back to a local repo and realize I have a bunch of temp work I created branches for that I no longer have any idea the contents or need. This command will clear everything other than the master branch.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">git branch | grep -v &quot;master&quot; | xargs git branch -D</code></pre>\n      </div>\n<p>credit: <a href="https://sublimecoding.com/remove-all-git-branches-except-master/">https://sublimecoding.com/remove-all-git-branches-except-master/</a></p>',frontmatter:{layout:"post",title:"Delete all but branches but master",path:"/articles/delete-all-but-branches-but-master",categories:["TIL"],description:"Command for clearing all git branches other than master",date:"2019/05/09"}}},{post:{html:'<p>Today I learned it\'s possible to center code in JetBrains products. This is apparently part of what they use to support the distraction-free mode. If you don\'t want to completely get rid of tool Windows, etc. but still want to center the code, you can use <a href="https://stackoverflow.com/questions/44796433/centre-code-in-android-studio-intellij-idea-editor/44802228#answer-44802228">this Stack Overflow post</a>.</p>\n<p>Essentially, it comes down to going to <code class="language-text">Help -&gt; Edit Custom VM Options</code> then enter <code class="language-text">-Deditor.distraction.free.mode=true</code>.</p>\n<p>Craft on.</p>',frontmatter:{layout:"post",title:"TIL: Center code in JetBrains editors",path:"/articles/til-center-code-in-jet-brains-editors",categories:["TIL"],description:"No more looking to the left of your display all the time!",date:"2018/11/08"}}},{post:{html:'<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">:.+1,$tabdo :q</code></pre>\n      </div>',frontmatter:{layout:"post",title:"Close all vim tabs to the right",path:"/articles/close-all-vim-tabs-to-the-right",categories:["TIL"],description:"This command will close all tabs to the right of the current tab in vim.",date:"2020/10/02"}}},{post:{html:'<p>Never done them before. Also haven\'t written an article for quite some time so want to dig in a tiny bit again. </p>\n<p>At work we\'ve got a fancy spreadsheet app that is regularly updated by one or potentially multiple users at once. Think a mix of Google Sheets and Google Docs. Right now, we don\'t have a great way for one user to receive updates from other users entering data in the shared docs a company might be working on. This POC is going to be an exploration of what that might look like.</p>\n<p>A plan:\n[X] Don\'t get fancy. Just get it working.\n[X] Initial goal: see a single piece of data update on the fly.\n[X] Start out just updating data directly on the server and pushing it to a browser.\n[X] Let multiple clients connect and receive the same data.\n[X] Let something push data into the server that continues to push data to clients.</p>\n<p>This seems like a good start and will be useful and interesting. I\'ll start there.</p>\n<h2>Get a server running.</h2>\n<p>...errrr wait. just figuring out which server to try using.</p>\n<p>Found some <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">lower leve understanding of websockets on MDN</a>.</p>\n<p>Had thought as I was looking into this that it\'s a good reminder to air on the side of reading docs and not trying to copy/paste so much. Forces a person to really understand what they\'re doing.</p>\n<p>Alas, <a href="https://blog.mrg.sh/build-a-websocket-server-using-express-and-ws-package">here\'s the article</a> I am basing this on to learn.</p>\n<p>Options</p>\n<ul>\n<li><a href="https://www.npmjs.com/package/socket.io">socket.io</a>. batteries included</li>\n<li><a href="https://www.npmjs.com/package/ws">ws</a>. basebones</li>\n</ul>\n<p>YES! We have a winner. Express is super easy to spinnup. Here\'s the initial running server: </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8000</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'hello express!\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'launching the express server!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Ended up venturing into the WS docs themselves and <a href="https://github.com/websockets/ws/blob/c82b08737fbe142dd910fc7e429399e23b95c6d6/examples/express-session-parse/index.js">found good example of using websockets</a> with express that\'s a little more informative as to what all is happening here.</p>\n<p>Alright, pass 2. Here\'s the new server:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8000</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> clientTracking<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> noServer<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'upgrade\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handling upgrade from http server. attempting websocket connection...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    wss<span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      wss<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">\'connection\'</span><span class="token punctuation">,</span> ws<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received message </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"closing socket connection..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/ws\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'this is a websocket endpoint. ask for an upgrade and you will get it!\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Super simple to add a little html page to server up from express:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>root<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../client/\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>so now i\'ve got this little one:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n    were in here!\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>oh heck yes.. here is a working solution sending a message from the webpage to the websocket!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>\n<span class="token operator">&lt;</span>html<span class="token operator">></span>\n    were <span class="token keyword">in</span> here<span class="token operator">!</span>\n    <span class="token operator">&lt;</span>button<span class="token operator">></span>Click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span>script<span class="token operator">></span>\n        <span class="token keyword">function</span> <span class="token function">createWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'were trying to make it!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">\'ws://localhost:8000/ws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            websocket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the connection is open! trying to send a message...\'</span><span class="token punctuation">)</span>\n                websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'holy moly this is the first one!\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> createWebSocket<span class="token punctuation">;</span> \n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>\n      </div>\n<p>and the output:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">&gt; websocket-live-eventing@1.0.0 dev\n&gt; node src/server/index.js\n\nListening on http://localhost:8000\nhandling upgrade from http server. attempting websocket connection...\npreparing the connection!\nclosing socket connection...\nhandling upgrade from http server. attempting websocket connection...\npreparing the connection!\nReceived message holy moly this is the first one!</code></pre>\n      </div>\n<p>now we can submit as many messages to the server as we want!</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialize-websocket-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Initialize websocket.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit-message-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Send message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> websocket<span class="token punctuation">;</span>\n\n        <span class="token keyword">function</span> <span class="token function">createWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'were trying to make it!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">\'ws://localhost:8000/ws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            websocket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the connection is open! trying to send a message...\'</span><span class="token punctuation">)</span>\n                websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'holy moly this is the first one!\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> initializeWebsocketButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'initialize-websocket-button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        initializeWebsocketButton<span class="token punctuation">.</span>onclick <span class="token operator">=</span> createWebSocket<span class="token punctuation">;</span> \n\n        <span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messageInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sent message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>messageInput<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. now clearing input..</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            messageInput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> messageInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> submitMessageButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'submit-message-button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        submitMessageButton<span class="token punctuation">.</span>onclick <span class="token operator">=</span> sendMessage<span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>Alright, looking back to the goals.. now i want to see if I can send a message BACK to the client from the server. I\'m thinking I\'ll just do this on an interval rather than the complexity of taking input to the server somehow. Lets do it.</p>\n<p>Well, that turned out to be pretty easy too. Here\'s the running server code that pushes messages back to the browser:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'ws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8000</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> clientTracking<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> noServer<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'upgrade\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handling upgrade from http server. attempting websocket connection...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    wss<span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      wss<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">\'connection\'</span><span class="token punctuation">,</span> ws<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'preparing the connection!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received message </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"closing socket connection..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">sendIntervalMessage</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/ws\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'this is a websocket endpoint. ask for an upgrade and you will get it!\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>root<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../client/\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> currentInterval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">sendIntervalMessage</span><span class="token punctuation">(</span><span class="token parameter">wsConnection<span class="token punctuation">,</span> intervalInMs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    wsConnection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sending message to the client: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>currentInterval<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    currentInterval <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> intervalInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>and the corresponding browser coded that handles it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialize-websocket-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Initialize websocket.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit-message-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Send message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> websocket<span class="token punctuation">;</span>\n\n        <span class="token keyword">function</span> <span class="token function">createWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'were trying to make it!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">\'ws://localhost:8000/ws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            websocket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the connection is open! trying to send a message...\'</span><span class="token punctuation">)</span>\n                websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'holy moly this is the first one!\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n            websocket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">received message from the server: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> initializeWebsocketButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'initialize-websocket-button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        initializeWebsocketButton<span class="token punctuation">.</span>onclick <span class="token operator">=</span> createWebSocket<span class="token punctuation">;</span> \n\n        <span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messageInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sent message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>messageInput<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. now clearing input..</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            messageInput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> messageInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> submitMessageButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'submit-message-button\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        submitMessageButton<span class="token punctuation">.</span>onclick <span class="token operator">=</span> sendMessage<span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>The latest experiment is making sure we can handle multiple websockets with this server and pass data around as we please. That "just worked" with no additional changes. I just cracked open another browser session and it started working. The thing that caught my attn was the numbers were skipping every other. So 1, 3, 5, 7 on one tab and 2, 4, 6, 8 on the other. This was because a global variable was used on the server to do the interval counting. Because an interval was added for each connection at the same interval time, this will for the most part be expected to update twice during a session in this small case of two connections.</p>\n<h2>Pushing data to browser from and external event source</h2>\n<p>I will use Google\'s <a href="https://cloud.google.com/">Google Cloud Platform</a> and specifically their <a href="https://cloud.google.com/pubsub/">Pub/Sub service</a> to carry out the event generation. For now, I\'ll plan to just generate the messages manually in the Cloud Console interface, which is Google\'s way of interacting with your services on their platform.</p>\n<p>Steps</p>\n<ul>\n<li><code class="language-text">npm i @google-cloud/pubsub</code></li>\n<li>follow google docs on <a href="https://cloud.google.com/pubsub/docs/reference/libraries#client-libraries-install-nodejs">pub/sub node.js client usage</a></li>\n<li>create topic in GCP project</li>\n<li>make sure there is a subscription to that topic</li>\n<li>verify all application default creds setup to run off personal account instead of work account</li>\n</ul>\n<p>Code to pull this off:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">listenForPubSubMessages</span><span class="token punctuation">(</span><span class="token parameter">wsConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> pubsub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">{</span>projectId<span class="token operator">:</span> <span class="token string">\'websocket-server-334803\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token keyword">await</span> pubsub<span class="token punctuation">.</span><span class="token function">subscription</span><span class="token punctuation">(</span><span class="token string">\'projects/websocket-server-334803/subscriptions/test-messages-sub\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  subscription<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received message from pub/sub:"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    wsConnection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  subscription<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Received error:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>',
frontmatter:{layout:"post",title:"Foray into websockets",path:"/articles/foray-into-websockets",categories:["architecture"],description:"Never used them before. Have heard about em&#x27;. Time to try em&#x27; out.",date:"2021/12/11"}}},{post:{html:'<p>Those times when you can\'t figure out what changed in your local directory, try this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">git ls-files --other --exclude-standard --directory</code></pre>\n      </div>',frontmatter:{layout:"post",title:"Grrr git says my directory isn&#x27;t clean",path:"/articles/grrr-git-says-my-directory-isn-t-clean",categories:["TIL"],description:"When git tells you your directory isn&#x27;t clean, yet &#x60;git status&#x60; doesn&#x27;t reveal anything helpful.",date:"2019/01/31"}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-29a56259a7b254b97bab.js.map