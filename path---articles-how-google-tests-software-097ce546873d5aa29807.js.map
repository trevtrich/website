{"version":3,"sources":["webpack:///path---articles-how-google-tests-software-097ce546873d5aa29807.js","webpack:///./.cache/json/articles-how-google-tests-software.json"],"names":["webpackJsonp","454","module","exports","data","site","meta","title","description","url","author","twitter","post","id","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,MAAQC,MAAA,oBAAAC,YAAA,uCAAAC,IAAA,8BAAAC,OAAA,oBAAAC,QAAA,cAAyKC,MAASC,GAAA,uJAAAC,KAAA,gwHAA+OC,aAAmsHC,OAAA,OAAAT,MAAA,4BAAAU,KAAA,sCAAAC,YAAA,oBAAAC,KAAA,gBAAyJC","file":"path---articles-how-google-tests-software-097ce546873d5aa29807.js","sourcesContent":["webpackJsonp([111417940544700],{\n\n/***/ 454:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"Trevor Richardson\",\"description\":\"Thoughts on life & crafting software\",\"url\":\"https://trevorrichardson.me\",\"author\":\"richardson-trevor\",\"twitter\":\"trevtrich\"}},\"post\":{\"id\":\"/Users/trevorrichardson/development/home/website/src/pages/articles/2018-01-30-how-google-tests-software/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Coming into this I was expecting a relatively technical book on testing; specifically where Google finds it’s unique niche in that realm. I was surprised to find out (very quickly) that this book is focussed much more on testing as a culture and as a mindset. This opens it up to be a book I’d recommend even to non-technical folks if they are in a software company.</p>\\n<p>The authors start with the overall path that Google had taken to get to the point they are with testing starting with no testers and quickly realizing that wasn’t sustainable when they had become a verb rather than a proper noun. They then quickly jump into the roles that have developed into their idea of the “testers”. A key point throughout the book is the reliance on keeping the “test team” in an organization small to focus resources on where they are really needed.</p>\\n<p>They spend a good majority of the book discussing the specific roles they have created in their organization for testers and what those specific roles do throughout the day.</p>\\n<h1>Software Engineer in Test</h1>\\n<p>These are the testers that are still writing code the majority of their time. They spend their time building tools, patterns, and systems that can be used to make the product engineers more productive and more willing to test their own software. Essentially, their job is making it easy for the software engineers to do the right thing and test their code. This can come in the form of creating test stubs that numerous teams use across the organization, build systems that automate away some of the infrastructure for running tests, etc.</p>\\n<h1>The Test Engineer</h1>\\n<p>The TE is an engineer that is as much in-tune with testing as in-tune with the product teams and the customers. They are the “pulling it all together” engineers. They make sure users flows are not broken, that risk areas are being tested, and that users are being looked after (usability, accessibility, etc.). They are a step further away from the software engineers than the Software Engineers in Test, but are very much in-tune with the products and the future vision.</p>\\n<p>They discuss a point that I found interesting here. The mention of agile methodologies doing away with much of what we used to think of as the “testing” phase. Since we now have the deployment capabilities to send a product to only small subsets of customers for testing (whether beta testers or real-world). Nothing specific to apply because of this, but worth considering. I hadn’t thought about it much thus far. As we get further in this direction, it will be interesting to see how this mindset affects any role that we consider a test role.</p>\\n<h1>Closing Thoughts</h1>\\n<p>In the final chapters of the book, the authors discuss the future of testing. A key point that very much summarizes the book and it’s core idea is that they believe the “software engineer in test” will become a things of the past. They believe that the all testing will simply be a job requirement of the software engineer. That it will be so embedded in the culture that there won’t have to be a separate title for it. This has been the direction they are seemingly headed and truly believe.</p>\\n<p>Overall, this was a good read. I’m not sure I come away with it with any specific thoughts or changes that should or could be made in my workplace, but I do think the thoughts and ideas expressed here are worth considering and instilling in a company culture.</p>\\n<p>It will be interesting to see in the coming years and decade what the role of a tester does become. Will we have them? I think so. As I think the authors would agree, there will always be a need for exploratory testing. Someone to side on behalf of users no matter how early in the process users choose to be involved.</p>\\n<h1>Review</h1>\\n<p>6/10.</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"How Google Tests Software\",\"path\":\"/articles/how-google-tests-software\",\"categories\":[\"REVIEW\",\"TESTING\"],\"date\":\"2018/01/30\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-how-google-tests-software-097ce546873d5aa29807.js","module.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"Trevor Richardson\",\"description\":\"Thoughts on life & crafting software\",\"url\":\"https://trevorrichardson.me\",\"author\":\"richardson-trevor\",\"twitter\":\"trevtrich\"}},\"post\":{\"id\":\"/Users/trevorrichardson/development/home/website/src/pages/articles/2018-01-30-how-google-tests-software/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Coming into this I was expecting a relatively technical book on testing; specifically where Google finds it’s unique niche in that realm. I was surprised to find out (very quickly) that this book is focussed much more on testing as a culture and as a mindset. This opens it up to be a book I’d recommend even to non-technical folks if they are in a software company.</p>\\n<p>The authors start with the overall path that Google had taken to get to the point they are with testing starting with no testers and quickly realizing that wasn’t sustainable when they had become a verb rather than a proper noun. They then quickly jump into the roles that have developed into their idea of the “testers”. A key point throughout the book is the reliance on keeping the “test team” in an organization small to focus resources on where they are really needed.</p>\\n<p>They spend a good majority of the book discussing the specific roles they have created in their organization for testers and what those specific roles do throughout the day.</p>\\n<h1>Software Engineer in Test</h1>\\n<p>These are the testers that are still writing code the majority of their time. They spend their time building tools, patterns, and systems that can be used to make the product engineers more productive and more willing to test their own software. Essentially, their job is making it easy for the software engineers to do the right thing and test their code. This can come in the form of creating test stubs that numerous teams use across the organization, build systems that automate away some of the infrastructure for running tests, etc.</p>\\n<h1>The Test Engineer</h1>\\n<p>The TE is an engineer that is as much in-tune with testing as in-tune with the product teams and the customers. They are the “pulling it all together” engineers. They make sure users flows are not broken, that risk areas are being tested, and that users are being looked after (usability, accessibility, etc.). They are a step further away from the software engineers than the Software Engineers in Test, but are very much in-tune with the products and the future vision.</p>\\n<p>They discuss a point that I found interesting here. The mention of agile methodologies doing away with much of what we used to think of as the “testing” phase. Since we now have the deployment capabilities to send a product to only small subsets of customers for testing (whether beta testers or real-world). Nothing specific to apply because of this, but worth considering. I hadn’t thought about it much thus far. As we get further in this direction, it will be interesting to see how this mindset affects any role that we consider a test role.</p>\\n<h1>Closing Thoughts</h1>\\n<p>In the final chapters of the book, the authors discuss the future of testing. A key point that very much summarizes the book and it’s core idea is that they believe the “software engineer in test” will become a things of the past. They believe that the all testing will simply be a job requirement of the software engineer. That it will be so embedded in the culture that there won’t have to be a separate title for it. This has been the direction they are seemingly headed and truly believe.</p>\\n<p>Overall, this was a good read. I’m not sure I come away with it with any specific thoughts or changes that should or could be made in my workplace, but I do think the thoughts and ideas expressed here are worth considering and instilling in a company culture.</p>\\n<p>It will be interesting to see in the coming years and decade what the role of a tester does become. Will we have them? I think so. As I think the authors would agree, there will always be a need for exploratory testing. Someone to side on behalf of users no matter how early in the process users choose to be involved.</p>\\n<h1>Review</h1>\\n<p>6/10.</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"How Google Tests Software\",\"path\":\"/articles/how-google-tests-software\",\"categories\":[\"REVIEW\",\"TESTING\"],\"date\":\"2018/01/30\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-how-google-tests-software.json\n// module id = 454\n// module chunks = 111417940544700"],"sourceRoot":""}